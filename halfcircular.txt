#include <iostream>

struct Node {
    int data;
    Node* next;
};

Node* createNode(int data) {
    Node* newNode = new Node();
    if (newNode) {
        newNode->data = data;
        newNode->next = nullptr;
    }
    return newNode;
}

void insertNode(Node** head, int data) {
    if (*head == nullptr) {
        *head = createNode(data);
        (*head)->next = *head;
        return;
    }

    Node* temp = *head;
    while (temp->next != *head) {
        temp = temp->next;
    }
    temp->next = createNode(data);
    temp->next->next = *head;
}

void displayList(Node* head) {
    if (head == nullptr) {
        std::cout << "List is empty." << std::endl;
        return;
    }

    Node* temp = head;
    do {
        std::cout << temp->data << " -> ";
        temp = temp->next;
    } while (temp != head);
    std::cout << "HEAD" << std::endl;
}

void splitCircularList(Node* head, Node** head1, Node** head2) {
    if (head == nullptr)
        return;

    Node* slowPtr = head;
    Node* fastPtr = head;

    while (fastPtr->next != head && fastPtr->next->next != head) {
        slowPtr = slowPtr->next;
        fastPtr = fastPtr->next->next;
    }

    if (fastPtr->next->next == head)
        fastPtr = fastPtr->next;

    *head1 = head;
    if (head->next != head)
        *head2 = slowPtr->next;

    fastPtr->next = slowPtr->next;
    slowPtr->next = head;
}

int main() {
    Node* head = nullptr;
    Node* head1 = nullptr;
    Node* head2 = nullptr;

    insertNode(&head, 1);
    insertNode(&head, 2);
    insertNode(&head, 3);
    insertNode(&head, 4);
    insertNode(&head, 5);

    std::cout << "Original Circular Linked List: ";
    displayList(head);

    splitCircularList(head, &head1, &head2);

    std::cout << "First Half: ";
    displayList(head1);

    std::cout << "Second Half: ";
    displayList(head2);

    return 0;
}
